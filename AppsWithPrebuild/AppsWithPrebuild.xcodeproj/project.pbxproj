// !$*UTF8*$!
{
	archiveVersion = 1;
	classes = {
	};
	objectVersion = 50;
	objects = {

/* Begin PBXBuildFile section */
		0AC7B4DD5F796E5EE33159C0 /* Dynamic2.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = 7077BEA149FF4A704E26931F /* Dynamic2.framework */; };
		1E3652E77AB4EEAD435A462A /* LaunchScreen.storyboard in Resources */ = {isa = PBXBuildFile; fileRef = D50E4BFE31B26C43449D6AA0 /* LaunchScreen.storyboard */; };
		32ECB869AE6D7F9843879F6D /* Dynamic1.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = 8427237EB1E12EBE7B9E24DA /* Dynamic1.framework */; };
		589D9354E4DC1A66D3E8EBEC /* Pods_AppsWithPrebuild.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = C0A0F93BB888087D506A1506 /* Pods_AppsWithPrebuild.framework */; };
		6ACC44CDF349EDABC18A0E3E /* Main.storyboard in Resources */ = {isa = PBXBuildFile; fileRef = E5BDBF54E42269B4E7F8B52E /* Main.storyboard */; };
		7EF5758376908F2780C3661F /* ViewController.swift in Sources */ = {isa = PBXBuildFile; fileRef = 6C22787A8A664ED89686C425 /* ViewController.swift */; };
		8C9D11F9792123D3B443508A /* SceneDelegate.swift in Sources */ = {isa = PBXBuildFile; fileRef = C62241E2EA93C8AC4AFC5E96 /* SceneDelegate.swift */; };
		999C192CEB373CD7FFA8D936 /* Dynamic1.framework in Embed Frameworks */ = {isa = PBXBuildFile; fileRef = 8427237EB1E12EBE7B9E24DA /* Dynamic1.framework */; settings = {ATTRIBUTES = (CodeSignOnCopy, RemoveHeadersOnCopy, ); }; };
		B14AD3BB121F16CB1C72966D /* AppDelegate.swift in Sources */ = {isa = PBXBuildFile; fileRef = D1BBECD82243F0BCE0CEAB3A /* AppDelegate.swift */; };
		B6893AA1CB1BFD429F6275CC /* DynamicPrebuild.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = 0EA209A1B84F7546D67ECEA7 /* DynamicPrebuild.framework */; };
		D13829A77A536AB4F9F82763 /* Dynamic2.framework in Embed Frameworks */ = {isa = PBXBuildFile; fileRef = 7077BEA149FF4A704E26931F /* Dynamic2.framework */; settings = {ATTRIBUTES = (CodeSignOnCopy, RemoveHeadersOnCopy, ); }; };
		D5B60FB59AF2362D5A5D2146 /* StaticFramework.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = 74A4E0A1E0D2F41521FECD90 /* StaticFramework.framework */; };
		EB2E366E44316B3F543DDEF7 /* Assets.xcassets in Resources */ = {isa = PBXBuildFile; fileRef = 414AB951A213F540F40BC098 /* Assets.xcassets */; };
/* End PBXBuildFile section */

/* Begin PBXCopyFilesBuildPhase section */
		7FA9E27D6B7095B9C7280E3B /* Embed Frameworks */ = {
			isa = PBXCopyFilesBuildPhase;
			buildActionMask = 2147483647;
			dstSubfolderSpec = 10;
			files = (
				999C192CEB373CD7FFA8D936 /* Dynamic1.framework in Embed Frameworks */,
				D13829A77A536AB4F9F82763 /* Dynamic2.framework in Embed Frameworks */,
			);
			name = "Embed Frameworks";
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXCopyFilesBuildPhase section */

/* Begin PBXFileReference section */
		09D2EDB0FC5E64911F84D135 /* Pods-AppsWithPrebuild.debug.xcconfig */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = text.xcconfig; name = "Pods-AppsWithPrebuild.debug.xcconfig"; path = "Target Support Files/Pods-AppsWithPrebuild/Pods-AppsWithPrebuild.debug.xcconfig"; sourceTree = "<group>"; };
		0ABBD3955F7A31FCB192E969 /* Base */ = {isa = PBXFileReference; lastKnownFileType = file.storyboard; name = Base; path = Base.lproj/LaunchScreen.storyboard; sourceTree = "<group>"; };
		0EA209A1B84F7546D67ECEA7 /* DynamicPrebuild.framework */ = {isa = PBXFileReference; lastKnownFileType = wrapper.framework; path = DynamicPrebuild.framework; sourceTree = "<group>"; };
		1EDFDC940962997D4E9DA137 /* Base */ = {isa = PBXFileReference; lastKnownFileType = file.storyboard; name = Base; path = Base.lproj/Main.storyboard; sourceTree = "<group>"; };
		2B6B98937B7BBC798D70CFE7 /* Pods-AppsWithPrebuild.release.xcconfig */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = text.xcconfig; name = "Pods-AppsWithPrebuild.release.xcconfig"; path = "Target Support Files/Pods-AppsWithPrebuild/Pods-AppsWithPrebuild.release.xcconfig"; sourceTree = "<group>"; };
		414AB951A213F540F40BC098 /* Assets.xcassets */ = {isa = PBXFileReference; lastKnownFileType = folder.assetcatalog; path = Assets.xcassets; sourceTree = "<group>"; };
		6C22787A8A664ED89686C425 /* ViewController.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = ViewController.swift; sourceTree = "<group>"; };
		7077BEA149FF4A704E26931F /* Dynamic2.framework */ = {isa = PBXFileReference; explicitFileType = wrapper.framework; includeInIndex = 0; path = Dynamic2.framework; sourceTree = BUILT_PRODUCTS_DIR; };
		74A4E0A1E0D2F41521FECD90 /* StaticFramework.framework */ = {isa = PBXFileReference; explicitFileType = wrapper.framework; includeInIndex = 0; path = StaticFramework.framework; sourceTree = BUILT_PRODUCTS_DIR; };
		79530B878845C57D0E83E3C9 /* AppsWithPrebuild.app */ = {isa = PBXFileReference; explicitFileType = wrapper.application; includeInIndex = 0; path = AppsWithPrebuild.app; sourceTree = BUILT_PRODUCTS_DIR; };
		8427237EB1E12EBE7B9E24DA /* Dynamic1.framework */ = {isa = PBXFileReference; explicitFileType = wrapper.framework; includeInIndex = 0; path = Dynamic1.framework; sourceTree = BUILT_PRODUCTS_DIR; };
		A498F5CE0B0F4760B5EB24F4 /* Info.plist */ = {isa = PBXFileReference; lastKnownFileType = text.plist; path = Info.plist; sourceTree = "<group>"; };
		C0A0F93BB888087D506A1506 /* Pods_AppsWithPrebuild.framework */ = {isa = PBXFileReference; explicitFileType = wrapper.framework; includeInIndex = 0; path = Pods_AppsWithPrebuild.framework; sourceTree = BUILT_PRODUCTS_DIR; };
		C62241E2EA93C8AC4AFC5E96 /* SceneDelegate.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = SceneDelegate.swift; sourceTree = "<group>"; };
		D1BBECD82243F0BCE0CEAB3A /* AppDelegate.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = AppDelegate.swift; sourceTree = "<group>"; };
/* End PBXFileReference section */

/* Begin PBXFrameworksBuildPhase section */
		25283F8E987B3979E64EC857 /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
				32ECB869AE6D7F9843879F6D /* Dynamic1.framework in Frameworks */,
				0AC7B4DD5F796E5EE33159C0 /* Dynamic2.framework in Frameworks */,
				D5B60FB59AF2362D5A5D2146 /* StaticFramework.framework in Frameworks */,
				B6893AA1CB1BFD429F6275CC /* DynamicPrebuild.framework in Frameworks */,
				589D9354E4DC1A66D3E8EBEC /* Pods_AppsWithPrebuild.framework in Frameworks */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXFrameworksBuildPhase section */

/* Begin PBXGroup section */
		242D40030421459B2893EDA4 /* Products */ = {
			isa = PBXGroup;
			children = (
				79530B878845C57D0E83E3C9 /* AppsWithPrebuild.app */,
				8427237EB1E12EBE7B9E24DA /* Dynamic1.framework */,
				7077BEA149FF4A704E26931F /* Dynamic2.framework */,
				74A4E0A1E0D2F41521FECD90 /* StaticFramework.framework */,
			);
			name = Products;
			sourceTree = "<group>";
		};
		34FF6B23977563964A20D6E3 /* AppsWithPrebuild */ = {
			isa = PBXGroup;
			children = (
				D50E4BFE31B26C43449D6AA0 /* LaunchScreen.storyboard */,
				E5BDBF54E42269B4E7F8B52E /* Main.storyboard */,
				D1BBECD82243F0BCE0CEAB3A /* AppDelegate.swift */,
				414AB951A213F540F40BC098 /* Assets.xcassets */,
				A498F5CE0B0F4760B5EB24F4 /* Info.plist */,
				C62241E2EA93C8AC4AFC5E96 /* SceneDelegate.swift */,
				6C22787A8A664ED89686C425 /* ViewController.swift */,
			);
			path = AppsWithPrebuild;
			sourceTree = "<group>";
		};
		518C0FA92A2E04E4DA73DD5D /* build */ = {
			isa = PBXGroup;
			children = (
				CFA067F32C09E3C3676C6E5D /* universal */,
			);
			name = build;
			path = ../build;
			sourceTree = "<group>";
		};
		6FD860981ADCFCF1EB2C5B5C = {
			isa = PBXGroup;
			children = (
				C8C80AAF4D99ACC7E1307A88 /* Project */,
				C6E2C2EF4D2663F258D0A170 /* Frameworks */,
				242D40030421459B2893EDA4 /* Products */,
				F8B007C32A60852155AF9432 /* Pods */,
			);
			sourceTree = "<group>";
		};
		C6E2C2EF4D2663F258D0A170 /* Frameworks */ = {
			isa = PBXGroup;
			children = (
				C0A0F93BB888087D506A1506 /* Pods_AppsWithPrebuild.framework */,
			);
			name = Frameworks;
			sourceTree = "<group>";
		};
		C8C80AAF4D99ACC7E1307A88 /* Project */ = {
			isa = PBXGroup;
			children = (
				34FF6B23977563964A20D6E3 /* AppsWithPrebuild */,
				518C0FA92A2E04E4DA73DD5D /* build */,
			);
			name = Project;
			sourceTree = "<group>";
		};
		CFA067F32C09E3C3676C6E5D /* universal */ = {
			isa = PBXGroup;
			children = (
				0EA209A1B84F7546D67ECEA7 /* DynamicPrebuild.framework */,
			);
			path = universal;
			sourceTree = "<group>";
		};
		F8B007C32A60852155AF9432 /* Pods */ = {
			isa = PBXGroup;
			children = (
				09D2EDB0FC5E64911F84D135 /* Pods-AppsWithPrebuild.debug.xcconfig */,
				2B6B98937B7BBC798D70CFE7 /* Pods-AppsWithPrebuild.release.xcconfig */,
			);
			name = Pods;
			path = ../Pods;
			sourceTree = "<group>";
		};
/* End PBXGroup section */

/* Begin PBXNativeTarget section */
		8EEDEFC465B4BA3E061B50AF /* AppsWithPrebuild */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = F56D3E3D3BE565908BBA5C11 /* Build configuration list for PBXNativeTarget "AppsWithPrebuild" */;
			buildPhases = (
				14B02EEB8ED8CB3BFA4D6058 /* [CP] Check Pods Manifest.lock */,
				944373EAB298BC670F7B23FD /* Sources */,
				4D0D08988FA3B80694FA4261 /* Resources */,
				385E3C505F3AC4DFD1B4ABC1 /* Embed Precompiled Frameworks */,
				7FA9E27D6B7095B9C7280E3B /* Embed Frameworks */,
				25283F8E987B3979E64EC857 /* Frameworks */,
				5CC363F0C5B91BD8FC6DD3FA /* [CP] Embed Pods Frameworks */,
			);
			buildRules = (
			);
			dependencies = (
			);
			name = AppsWithPrebuild;
			productName = AppsWithPrebuild;
			productReference = 79530B878845C57D0E83E3C9 /* AppsWithPrebuild.app */;
			productType = "com.apple.product-type.application";
		};
/* End PBXNativeTarget section */

/* Begin PBXProject section */
		8073A468CDE478632AE7BB9D /* Project object */ = {
			isa = PBXProject;
			attributes = {
				TargetAttributes = {
				};
			};
			buildConfigurationList = 09DA9C5A32EE0367C758E3E7 /* Build configuration list for PBXProject "AppsWithPrebuild" */;
			compatibilityVersion = "Xcode 9.3";
			developmentRegion = en;
			hasScannedForEncodings = 0;
			knownRegions = (
				Base,
				en,
			);
			mainGroup = 6FD860981ADCFCF1EB2C5B5C;
			productRefGroup = 242D40030421459B2893EDA4 /* Products */;
			projectDirPath = "";
			projectRoot = "";
			targets = (
				8EEDEFC465B4BA3E061B50AF /* AppsWithPrebuild */,
			);
		};
/* End PBXProject section */

/* Begin PBXResourcesBuildPhase section */
		4D0D08988FA3B80694FA4261 /* Resources */ = {
			isa = PBXResourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				EB2E366E44316B3F543DDEF7 /* Assets.xcassets in Resources */,
				1E3652E77AB4EEAD435A462A /* LaunchScreen.storyboard in Resources */,
				6ACC44CDF349EDABC18A0E3E /* Main.storyboard in Resources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXResourcesBuildPhase section */

/* Begin PBXShellScriptBuildPhase section */
		14B02EEB8ED8CB3BFA4D6058 /* [CP] Check Pods Manifest.lock */ = {
			isa = PBXShellScriptBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			inputFileListPaths = (
			);
			inputPaths = (
				"${PODS_PODFILE_DIR_PATH}/Podfile.lock",
				"${PODS_ROOT}/Manifest.lock",
			);
			name = "[CP] Check Pods Manifest.lock";
			outputFileListPaths = (
			);
			outputPaths = (
				"$(DERIVED_FILE_DIR)/Pods-AppsWithPrebuild-checkManifestLockResult.txt",
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /bin/sh;
			shellScript = "diff \"${PODS_PODFILE_DIR_PATH}/Podfile.lock\" \"${PODS_ROOT}/Manifest.lock\" > /dev/null\nif [ $? != 0 ] ; then\n    # print error to STDERR\n    echo \"error: The sandbox is not in sync with the Podfile.lock. Run 'pod install' or update your CocoaPods installation.\" >&2\n    exit 1\nfi\n# This output is used by Xcode 'outputs' to avoid re-running this script phase.\necho \"SUCCESS\" > \"${SCRIPT_OUTPUT_FILE_0}\"\n";
			showEnvVarsInLog = 0;
		};
		385E3C505F3AC4DFD1B4ABC1 /* Embed Precompiled Frameworks */ = {
			isa = PBXShellScriptBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			inputPaths = (
				../build/universal/DynamicPrebuild.framework,
			);
			name = "Embed Precompiled Frameworks";
			outputPaths = (
				"${TARGET_BUILD_DIR}/${FRAMEWORKS_FOLDER_PATH}/DynamicPrebuild.framework",
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /bin/sh;
			shellScript = "#!/bin/sh\nset -e\nset -u\nset -o pipefail\n\nfunction on_error {\n  echo \"$(realpath -mq \"${0}\"):$1: error: Unexpected failure\"\n}\ntrap 'on_error $LINENO' ERR\n\nif [ -z ${FRAMEWORKS_FOLDER_PATH+x} ]; then\n  # If FRAMEWORKS_FOLDER_PATH is not set, then there's nowhere for us to copy\n  # frameworks to, so exit 0 (signalling the script phase was successful).\n  exit 0\nfi\n\necho \"mkdir -p ${CONFIGURATION_BUILD_DIR}/${FRAMEWORKS_FOLDER_PATH}\"\nmkdir -p \"${CONFIGURATION_BUILD_DIR}/${FRAMEWORKS_FOLDER_PATH}\"\n\nSWIFT_STDLIB_PATH=\"${DT_TOOLCHAIN_DIR}/usr/lib/swift/${PLATFORM_NAME}\"\n# Used as a return value for each invocation of `strip_invalid_archs` function.\nSTRIP_BINARY_RETVAL=0\n# This protects against multiple targets copying the same framework dependency at the same time. The solution\n# was originally proposed here: https://lists.samba.org/archive/rsync/2008-February/020158.html\nRSYNC_PROTECT_TMP_FILES=(--filter \"P .*.??????\")\n# Copies and strips a vendored framework\ninstall_framework()\n{\n  if [ -r \"${BUILT_PRODUCTS_DIR}/$1\" ]; then\n    local source=\"${BUILT_PRODUCTS_DIR}/$1\"\n  elif [ -r \"${BUILT_PRODUCTS_DIR}/$(basename \"$1\")\" ]; then\n    local source=\"${BUILT_PRODUCTS_DIR}/$(basename \"$1\")\"\n  elif [ -r \"$1\" ]; then\n    local source=\"$1\"\n  fi\n  local destination=\"${TARGET_BUILD_DIR}/${FRAMEWORKS_FOLDER_PATH}\"\n  if [ -L \"${source}\" ]; then\n    echo \"Symlinked...\"\n    source=\"$(readlink \"${source}\")\"\n  fi\n  # Use filter instead of exclude so missing patterns don't throw errors.\n  echo \"rsync --delete -av \"${RSYNC_PROTECT_TMP_FILES[@]}\" --filter \\\"- CVS/\\\" --filter \\\"- .svn/\\\" --filter \\\"- .git/\\\" --filter \\\"- .hg/\\\" --filter \\\"- Headers\\\" --filter \\\"- PrivateHeaders\\\" --filter \\\"- Modules\\\" \\\"${source}\\\" \\\"${destination}\\\"\"\n  rsync --delete -av \"${RSYNC_PROTECT_TMP_FILES[@]}\" --filter \"- CVS/\" --filter \"- .svn/\" --filter \"- .git/\" --filter \"- .hg/\" --filter \"- Headers\" --filter \"- PrivateHeaders\" --filter \"- Modules\" \"${source}\" \"${destination}\"\n  local basename\n  basename=\"$(basename -s .framework \"$1\")\"\n  binary=\"${destination}/${basename}.framework/${basename}\"\n  if ! [ -r \"$binary\" ]; then\n    binary=\"${destination}/${basename}\"\n  elif [ -L \"${binary}\" ]; then\n    echo \"Destination binary is symlinked...\"\n    dirname=\"$(dirname \"${binary}\")\"\n    binary=\"${dirname}/$(readlink \"${binary}\")\"\n  fi\n  # Strip invalid architectures so \"fat\" simulator / device frameworks work on device\n  if [[ \"$(file \"$binary\")\" == *\"dynamically linked shared library\"* ]]; then\n    strip_invalid_archs \"$binary\"\n  fi\n  # Resign the code if required by the build settings to avoid unstable apps\n  code_sign_if_enabled \"${destination}/$(basename \"$1\")\"\n}\n\n\n# Copies and strips a vendored dSYM\ninstall_dsym() {\n  local source=\"$1\"\n  if [ -r \"$source\" ]; then\n\n    # Copy the dSYM into a the targets temp dir.\n    echo \"rsync --delete -av \"${RSYNC_PROTECT_TMP_FILES[@]}\" --filter \\\"- CVS/\\\" --filter \\\"- .svn/\\\" --filter \\\"- .git/\\\" --filter \\\"- .hg/\\\" --filter \\\"- Headers\\\" --filter \\\"- PrivateHeaders\\\" --filter \\\"- Modules\\\" \\\"${source}\\\" \\\"${DERIVED_FILES_DIR}\\\"\"\n    rsync --delete -av \"${RSYNC_PROTECT_TMP_FILES[@]}\" --filter \"- CVS/\" --filter \"- .svn/\" --filter \"- .git/\" --filter \"- .hg/\" --filter \"- Headers\" --filter \"- PrivateHeaders\" --filter \"- Modules\" \"${source}\" \"${DERIVED_FILES_DIR}\"\n\n    local basename\n    basename=\"$(basename -s .framework.dSYM \"$source\")\"\n    binary=\"${DERIVED_FILES_DIR}/${basename}.framework.dSYM/Contents/Resources/DWARF/${basename}\"\n\n    # Strip invalid architectures so \"fat\" simulator / device frameworks work on device\n    if [[ \"$(file \"$binary\")\" == *\"Mach-O \"*\"dSYM companion\"* ]]; then\n      strip_invalid_archs \"$binary\"\n    fi\n    if [[ $STRIP_BINARY_RETVAL == 1 ]]; then\n      # Move the stripped file into its final destination.\n      echo \"rsync --delete -av \"${RSYNC_PROTECT_TMP_FILES[@]}\" --filter \\\"- CVS/\\\" --filter \\\"- .svn/\\\" --filter \\\"- .git/\\\" --filter \\\"- .hg/\\\" --filter \\\"- Headers\\\" --filter \\\"- PrivateHeaders\\\" --filter \\\"- Modules\\\" \\\"${DERIVED_FILES_DIR}/${basename}.framework.dSYM\\\" \\\"${DWARF_DSYM_FOLDER_PATH}\\\"\"\n      rsync --delete -av \"${RSYNC_PROTECT_TMP_FILES[@]}\" --filter \"- CVS/\" --filter \"- .svn/\" --filter \"- .git/\" --filter \"- .hg/\" --filter \"- Headers\" --filter \"- PrivateHeaders\" --filter \"- Modules\" \"${DERIVED_FILES_DIR}/${basename}.framework.dSYM\" \"${DWARF_DSYM_FOLDER_PATH}\"\n    else\n      # The dSYM was not stripped at all, in this case touch a fake folder so the input/output paths from Xcode do not reexecute this script because the file is missing.\n      touch \"${DWARF_DSYM_FOLDER_PATH}/${basename}.framework.dSYM\"\n    fi\n\n  fi\n}\n\n\n# Copies the bcsymbolmap files of a vendored framework\ninstall_bcsymbolmap() {\n    local bcsymbolmap_path=\"$1\"\n    local destination=\"${BUILT_PRODUCTS_DIR}\"\n    echo \"rsync --delete -av \"${RSYNC_PROTECT_TMP_FILES[@]}\" --filter \"- CVS/\" --filter \"- .svn/\" --filter \"- .git/\" --filter \"- .hg/\" --filter \"- Headers\" --filter \"- PrivateHeaders\" --filter \"- Modules\" \"${bcsymbolmap_path}\" \"${destination}\"\"\n    rsync --delete -av \"${RSYNC_PROTECT_TMP_FILES[@]}\" --filter \"- CVS/\" --filter \"- .svn/\" --filter \"- .git/\" --filter \"- .hg/\" --filter \"- Headers\" --filter \"- PrivateHeaders\" --filter \"- Modules\" \"${bcsymbolmap_path}\" \"${destination}\"\n}\n\n\n# Signs a framework with the provided identity\ncode_sign_if_enabled() {\n  if [ -n \"${EXPANDED_CODE_SIGN_IDENTITY:-}\" -a \"${CODE_SIGNING_REQUIRED:-}\" != \"NO\" -a \"${CODE_SIGNING_ALLOWED}\" != \"NO\" ]; then\n    # Use the current code_sign_identity\n    echo \"Code Signing $1 with Identity ${EXPANDED_CODE_SIGN_IDENTITY_NAME}\"\n    local code_sign_cmd=\"/usr/bin/codesign --force --sign ${EXPANDED_CODE_SIGN_IDENTITY} ${OTHER_CODE_SIGN_FLAGS:-} --preserve-metadata=identifier,entitlements '$1'\"\n    code_sign_cmd=\"$code_sign_cmd &\"\n    echo \"$code_sign_cmd\"\n    eval \"$code_sign_cmd\"\n  fi\n}\n\n\n# Strip invalid architectures\nstrip_invalid_archs() {\n  binary=\"$1\"\n  # Get architectures for current target binary\n  binary_archs=\"$(lipo -info \"$binary\" | rev | cut -d ':' -f1 | awk '{$1=$1;print}' | rev)\"\n  # Intersect them with the architectures we are building for\n  intersected_archs=\"$(echo ${ARCHS[@]} ${binary_archs[@]} | tr ' ' '\\n' | sort | uniq -d)\"\n  # If there are no archs supported by this binary then warn the user\n  if [[ -z \"$intersected_archs\" ]]; then\n    echo \"warning: [CP] Vendored binary '$binary' contains architectures ($binary_archs) none of which match the current build architectures ($ARCHS).\"\n    STRIP_BINARY_RETVAL=0\n    return\n  fi\n  stripped=\"\"\n  for arch in $binary_archs; do\n    if ! [[ \"${ARCHS}\" == *\"$arch\"* ]]; then\n      # Strip non-valid architectures in-place\n      lipo -remove \"$arch\" -output \"$binary\" \"$binary\"\n      stripped=\"$stripped $arch\"\n    fi\n  done\n  if [[ \"$stripped\" ]]; then\n    echo \"Stripped $binary of architectures:$stripped\"\n  fi\n  STRIP_BINARY_RETVAL=1\n}\ninstall_framework \"../build/universal/DynamicPrebuild.framework\"\n";
		};
		5CC363F0C5B91BD8FC6DD3FA /* [CP] Embed Pods Frameworks */ = {
			isa = PBXShellScriptBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			inputFileListPaths = (
				"${PODS_ROOT}/Target Support Files/Pods-AppsWithPrebuild/Pods-AppsWithPrebuild-frameworks-${CONFIGURATION}-input-files.xcfilelist",
			);
			name = "[CP] Embed Pods Frameworks";
			outputFileListPaths = (
				"${PODS_ROOT}/Target Support Files/Pods-AppsWithPrebuild/Pods-AppsWithPrebuild-frameworks-${CONFIGURATION}-output-files.xcfilelist",
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /bin/sh;
			shellScript = "\"${PODS_ROOT}/Target Support Files/Pods-AppsWithPrebuild/Pods-AppsWithPrebuild-frameworks.sh\"\n";
			showEnvVarsInLog = 0;
		};
/* End PBXShellScriptBuildPhase section */

/* Begin PBXSourcesBuildPhase section */
		944373EAB298BC670F7B23FD /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				B14AD3BB121F16CB1C72966D /* AppDelegate.swift in Sources */,
				8C9D11F9792123D3B443508A /* SceneDelegate.swift in Sources */,
				7EF5758376908F2780C3661F /* ViewController.swift in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXSourcesBuildPhase section */

/* Begin PBXVariantGroup section */
		D50E4BFE31B26C43449D6AA0 /* LaunchScreen.storyboard */ = {
			isa = PBXVariantGroup;
			children = (
				0ABBD3955F7A31FCB192E969 /* Base */,
			);
			name = LaunchScreen.storyboard;
			sourceTree = "<group>";
		};
		E5BDBF54E42269B4E7F8B52E /* Main.storyboard */ = {
			isa = PBXVariantGroup;
			children = (
				1EDFDC940962997D4E9DA137 /* Base */,
			);
			name = Main.storyboard;
			sourceTree = "<group>";
		};
/* End PBXVariantGroup section */

/* Begin XCBuildConfiguration section */
		376D5B5B12EA5D806842785A /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++14";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_ENABLE_OBJC_WEAK = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_COMMA = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_STRICT_PROTOTYPES = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				COPY_PHASE_STRIP = NO;
				DEBUG_INFORMATION_FORMAT = dwarf;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				ENABLE_TESTABILITY = YES;
				GCC_C_LANGUAGE_STANDARD = gnu11;
				GCC_DYNAMIC_NO_PIC = NO;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_OPTIMIZATION_LEVEL = 0;
				GCC_PREPROCESSOR_DEFINITIONS = (
					"DEBUG=1",
					"$(inherited)",
				);
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				MTL_ENABLE_DEBUG_INFO = YES;
				ONLY_ACTIVE_ARCH = YES;
				PRODUCT_NAME = "$(TARGET_NAME)";
			};
			name = Debug;
		};
		7052F465B724998AFC6F5E9C /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++14";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_ENABLE_OBJC_WEAK = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_COMMA = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_STRICT_PROTOTYPES = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				COPY_PHASE_STRIP = NO;
				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
				ENABLE_NS_ASSERTIONS = NO;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				GCC_C_LANGUAGE_STANDARD = gnu11;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				MTL_ENABLE_DEBUG_INFO = NO;
				PRODUCT_NAME = "$(TARGET_NAME)";
				VALIDATE_PRODUCT = YES;
			};
			name = Release;
		};
		8A3B72DCE296C8F558715AA7 /* Release */ = {
			isa = XCBuildConfiguration;
			baseConfigurationReference = 2B6B98937B7BBC798D70CFE7 /* Pods-AppsWithPrebuild.release.xcconfig */;
			buildSettings = {
				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
				CODE_SIGN_IDENTITY = "iPhone Developer";
				ENABLE_PREVIEWS = YES;
				FRAMEWORK_SEARCH_PATHS = (
					"$(inherited)",
					"$(SRCROOT)/../build/universal",
				);
				INFOPLIST_FILE = AppsWithPrebuild/Info.plist;
				LD_RUNPATH_SEARCH_PATHS = (
					"$(inherited)",
					"@executable_path/Frameworks",
				);
				PRODUCT_BUNDLE_IDENTIFIER = com.fachrifaul.AppsWithPrebuild;
				PRODUCT_NAME = AppsWithPrebuild;
				SDKROOT = iphoneos;
				SUPPORTED_PLATFORMS = "iphonesimulator iphoneos";
				SWIFT_COMPILATION_MODE = wholemodule;
				SWIFT_OPTIMIZATION_LEVEL = "-Owholemodule";
				SWIFT_VERSION = 5.2.4;
				TARGETED_DEVICE_FAMILY = "1,2";
			};
			name = Release;
		};
		A4BDA917176FEF9EE01B4AC2 /* Debug */ = {
			isa = XCBuildConfiguration;
			baseConfigurationReference = 09D2EDB0FC5E64911F84D135 /* Pods-AppsWithPrebuild.debug.xcconfig */;
			buildSettings = {
				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
				CODE_SIGN_IDENTITY = "iPhone Developer";
				ENABLE_PREVIEWS = YES;
				FRAMEWORK_SEARCH_PATHS = (
					"$(inherited)",
					"$(SRCROOT)/../build/universal",
				);
				INFOPLIST_FILE = AppsWithPrebuild/Info.plist;
				LD_RUNPATH_SEARCH_PATHS = (
					"$(inherited)",
					"@executable_path/Frameworks",
				);
				PRODUCT_BUNDLE_IDENTIFIER = com.fachrifaul.AppsWithPrebuild;
				PRODUCT_NAME = AppsWithPrebuild;
				SDKROOT = iphoneos;
				SUPPORTED_PLATFORMS = "iphonesimulator iphoneos";
				SWIFT_ACTIVE_COMPILATION_CONDITIONS = DEBUG;
				SWIFT_COMPILATION_MODE = singlefile;
				SWIFT_OPTIMIZATION_LEVEL = "-Onone";
				SWIFT_VERSION = 5.2.4;
				TARGETED_DEVICE_FAMILY = "1,2";
			};
			name = Debug;
		};
/* End XCBuildConfiguration section */

/* Begin XCConfigurationList section */
		09DA9C5A32EE0367C758E3E7 /* Build configuration list for PBXProject "AppsWithPrebuild" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				376D5B5B12EA5D806842785A /* Debug */,
				7052F465B724998AFC6F5E9C /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		F56D3E3D3BE565908BBA5C11 /* Build configuration list for PBXNativeTarget "AppsWithPrebuild" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				A4BDA917176FEF9EE01B4AC2 /* Debug */,
				8A3B72DCE296C8F558715AA7 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
/* End XCConfigurationList section */
	};
	rootObject = 8073A468CDE478632AE7BB9D /* Project object */;
}
